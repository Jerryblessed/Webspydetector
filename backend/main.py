#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import secrets
import os
from flask import Flask, render_template, send_from_directory, jsonify, redirect
from app.blueprints.ioc import ioc_bp
from app.blueprints.whitelist import whitelist_bp
from app.blueprints.config import config_bp
from app.blueprints.misp import misp_bp
from app.blueprints.watchers import watchers_bp
from app.blueprints.update import update_bp
from app.utils import read_config
from sys import path

app = Flask(__name__, template_folder="dist")
app.config["SECRET_KEY"] = secrets.token_hex(16)  # Optional: You can keep or remove the secret key if not needed

@app.route("/", methods=["GET"])
def main():
    """
        Return the index.html generated by Vue
    """
    return render_template("index.html")

@app.route("/<p>/<path:path>", methods=["GET"])
def get_file(p, path):
    """
        Return the backend assets (css, js files, fonts etc.)
    """
    rp = "dist/{}".format(p)
    return send_from_directory(rp, path) if p in ["css", "fonts", "js", "img"] else redirect("/")

@app.errorhandler(404)
def page_not_found(e):
    return redirect("/")

# API Blueprints.
app.register_blueprint(ioc_bp, url_prefix='/api/ioc')
app.register_blueprint(whitelist_bp, url_prefix='/api/whitelist')
app.register_blueprint(config_bp, url_prefix='/api/config')
app.register_blueprint(misp_bp, url_prefix='/api/misp')
app.register_blueprint(watchers_bp, url_prefix='/api/watchers')
app.register_blueprint(update_bp, url_prefix='/api/update')

if __name__ == '__main__':
    if read_config(("backend", "remote_access")):
        try:
            app.run(host="0.0.0.0", port=8443)
        except Exception as e:
            logging.error(f"SSL Error occurred: {e}", exc_info=True)
            print("An SSL error occurred. Check the logs for more information.")
    else:
        app.run(port=8443)
